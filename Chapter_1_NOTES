# Introduction

This book will teach you techniques of algorithm design and analysis so that you can develop algorithms on your own,
show that they give the correct answer, and understand their efficiency.

## Chapter 1 :  - This chapter defines what an algorithm is and lists some examples. Consider algorithms as a technology.

## Chapter 2: 	
    - our first algorithms, which solve the problem of sorting a sequence of n numbers.
    
    - insertion sort, which uses an incremental approach, and merge sort, which uses a recursive technique known as “divide-and-conquer.”
    
    - Although the time each requires increases with the value of n, the rate of increase differs between the two algorithms.

## Chapter 3: 
    - Defines the algorithms running time notations (asymptotic notation).

## Chapter 4: 
    - delves further into the divide-and-conquer method introduced in Chapter 2.

    - It provides additional examples of divide-and-conquer algorithms, including ** Strassen’s surprising method for multiplying two square matrices **.

    - Contains methods for solving recurrences,which are useful for describing the running times of recursive algorithms.

    -  One powerful technique is the “master method,” which we often use to solve recurrences that arise from divide-and conquer algorithms.

## Chapter 5:
    - introduces ** probabilistic analysis and randomized algorithms **. We typically use probabilistic analysis to determine the running time of an algorithm 
      in cases in which, due to the presence of an inherent probability distribution, the running time may differ on different inputs of the same size.

		- Randomized algorithm: an algorithm whose behavior is determined not only by its input but by the values produced by a random-number generator.


** Appendices A–D contain other mathematical material.Appendices are reference materials. **
